# Defines the deployment of the app running in a pod on any worker node
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
  labels:
    app: mmli-fastapi
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mmli-fastapi
  template:
    metadata:
      labels:
        app: mmli-fastapi
    spec:
      serviceAccountName: {{ .Release.Name }}-foreman
      volumes:
        - name: server-secrets
          secret:
            secretName: {{ .Values.config.existingSecret }}
        - name: server-config
          configMap:
            name: {{ .Release.Name }}-config
        - name: shared-storage
          persistentVolumeClaim:
            claimName: {{ .Values.sharedStorage.existingClaim }}
      initContainers:
        - name: wait-for-postgres
          image: busybox:1.28
          command: [ 'sh', '-c', "until nslookup {{ .Release.Name }}-postgresql.$(cat /var/run/secrets/kubernetes.io/serviceaccount/namespace).svc.cluster.local; do echo waiting for {{ .Release.Name }}-postgresql; sleep 2; done" ]
{{- if .Values.postgresql.autoschema }}
        - name: init-postgres-alembic
          image: {{ .Values.controller.image }}
          imagePullPolicy: Always
          workingDir: /code
          command: [ 'alembic', 'upgrade', 'head' ]
          env:
            - name: POSTGRES_HOST
{{- if .Values.postgresql.hostname }}
              value: {{ .Values.postgresql.hostname }}
{{ else }}
              value: {{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local
{{- end }}
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: postgres-password
{{- if .Values.postgresql.auth.existingSecret }}
                  name: {{ .Values.postgresql.auth.existingSecret }}
{{ else }}
                  name: {{ .Release.Name }}-postgresql
{{- end }}
            - name: POSTGRES_DATABASE
              value: {{ .Values.postgresql.auth.database }}
            - name: POSTGRES_USER
              value: {{ .Values.postgresql.auth.username }}
            - name: SQLALCHEMY_DATABASE_URL
              value: "postgresql+asyncpg://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):5432/$(POSTGRES_DATABASE)"
{{- end }}
      containers:
        - name: mmli-fastapi
          image: {{ .Values.controller.image }}
          volumeMounts:
            - name: server-config
              mountPath: /code/app/cfg/config.yaml
              subPath: config.yaml
            - name: server-secrets
              mountPath: /code/app/cfg/secret.yaml
              subPath: secret.yaml
            - name: shared-storage
              mountPath: {{ .Values.sharedStorage.mountPath }}
              subPath: {{ .Values.sharedStorage.subPath }}
          env:

          - name: POSTGRES_HOST
{{- if .Values.postgresql.hostname }}
            value: {{ .Values.postgresql.hostname }}
{{ else }}
            value: {{ .Release.Name }}-postgresql.{{ .Release.Namespace }}.svc.cluster.local
{{- end }}

          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                key: postgres-password
{{- if .Values.postgresql.auth.existingSecret }}
                name: {{ .Values.postgresql.auth.existingSecret }}
{{ else }}
                name: {{ .Release.Name }}-postgresql
{{- end }}

          - name: POSTGRES_DATABASE
            value: {{ .Values.postgresql.auth.database }}

          - name: POSTGRES_USER
            value: {{ .Values.postgresql.auth.username }}

          # MINIO_SERVER=localhost:9000
          - name: MINIO_HOST
            value: {{ .Release.Name }}-minio.{{ .Release.Namespace }}.svc.cluster.local
          - name: MINIO_PORT
            value: "9000"
          - name: MINIO_SERVER
            value: "$(MINIO_HOST):$(MINIO_PORT)"
          - name: MINIO_API_BASE_URL
            value: {{ .Values.minio.apiIngress.hostname }}

          # MINIO_ACCESS_KEY=your-access-key
          - name: MINIO_ACCESS_KEY 
{{- if .Values.minio.auth.existingSecret }}
            valueFrom:
              secretKeyRef:
                name: {{ .Values.minio.auth.existingSecret }}
                key: root-user
{{- else }}
            value: {{ .Values.minio.auth.rootUser }}
{{- end }}

          # MINIO_SECRET_KEY=your-secret-key
          - name: MINIO_SECRET_KEY
{{- if .Values.minio.auth.existingSecret }}
            valueFrom:
              secretKeyRef:
                name: {{ .Values.minio.auth.existingSecret }}
                key: root-password
{{- else }}
            value: {{ .Values.minio.auth.rootPassword }}
{{- end }}

          - name: SQLALCHEMY_DATABASE_URL
            value: "postgresql+asyncpg://$(POSTGRES_USER):$(POSTGRES_PASSWORD)@$(POSTGRES_HOST):5432/$(POSTGRES_DATABASE)"

          - name: CHEMSCRAPER_API_BASE_URL
            value: {{ .Values.config.chemscraper_url }}
          - name: RELEASE_NAME
            value: {{ .Release.Name }}

          - name: CHEMSCRAPER_FRONTEND_URL
            value: {{ .Values.config.chemscraper_frontend_url }}
          - name: EMAIL_SERVER
            value: "smtp.ncsa.uiuc.edu"
          - name: EMAIL_FROM_EMAIL
            value: "devnull+chemscraper@ncsa.illinois.edu"
          - name: EMAIL_FROM_NAME
            value: "no-reply-ChemScraper"

          - name: NOVOSTOIC_FRONTEND_URL
            value: {{ .Values.config.novostoic_frontend_url }}
          - name: SOMN_FRONTEND_URL
            value: {{ .Values.config.somn_frontend_url }}
            
          ports:
            - containerPort: 8080
          imagePullPolicy: Always
