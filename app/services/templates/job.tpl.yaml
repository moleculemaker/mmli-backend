apiVersion: batch/v1
kind: Job
metadata:
  name: {{ name }}
  namespace: {{ namespace }}
spec:
  completions: {{ replicas }}
  parallelism: {{ replicas }}
  backoffLimit: {{ backoffLimit }}
  activeDeadlineSeconds: {{ activeDeadlineSeconds }}
  ttlSecondsAfterFinished: {{ ttlSecondsAfterFinished }}
  template:
    metadata:
      labels:
        type: "mmli-job"
        jobId: "{{ jobId }}"
        jobType: "{{ jobType }}"
        runId: "{{ runId }}"
        ownerId: "{{ ownerId }}"
    spec:
      {%- if tolerations %}
      tolerations:
        {% for tol in tolerations %}
        - effect: {{ tol.effect }}
          key: {{ tol.key }}
          operator: {{ tol.operator }}
        {% endfor %}
      {% endif %}
      {%- if nodeSelector %}
      nodeSelector:
        {% for labelKey, labelValue in nodeSelector.items() %}
        {{ labelKey }}: "{{ labelValue }}"
        {% endfor %}
      {% endif %}
      {%- if image.pull_secrets %}
      imagePullSecrets:
        {% for sec in image.pull_secrets %}
        - name: "{{ sec }}"
        {% endfor %}
      {%- endif %}
      restartPolicy: Never
      {%- if securityContext %}
      securityContext:
        runAsUser: {{ securityContext['runAsUser'] }}
        runAsGroup: {{ securityContext['runAsGroup'] }}
        fsGroup: {{ securityContext['fsGroup'] }}
      {%- endif %}
      volumes:
        - name: server-config
          configMap:
            name: "{{ releaseName }}-config"
        - name: server-secret
          secret:
            secretName: "{{ releaseName }}-secrets"
        # Volume to host job data
        - name: "shared-storage"
          persistentVolumeClaim:
            claimName: "{{ workingVolume.claimName }}"
        {%- for sec in secrets %}
        - name: "{{ sec.name }}"
          secret:
            secretName: "{{ sec.secretName }}"
            {%- if sec.itemList %}
            items:
              {%- for secretItem in sec.itemList %}
              - key: "{{ secretItem.key }}"
                path: "{{ secretItem.path }}"
              {%- endfor %}
            {%- endif %}
        {%- endfor %}
      initContainers:
      - name: init
        image: moleculemaker/mmli-backend:kubejob
        imagePullPolicy: Always
        # securityContext:
        #   runAsUser: 0
        volumeMounts:
        - name: "shared-storage"
          mountPath: "/uws"
          subPath: "uws"
        - name: server-config
          mountPath: /code/app/cfg/config.yaml
          subPath: config.yaml
        - name: server-secret
          mountPath: /code/app/cfg/secret.yaml
          subPath: secret.yaml
        env:
        - name: "JOB_ID"
          value: "{{ jobId }}"
        - name: "JOB_TYPE"
          value: "{{ jobType }}"
        - name: "JOB_OUTPUT_DIR"
          value: "{{ job_output_dir }}"
        - name: "JOB_INPUT_DIR"
          value: "{{ job_input_dir }}"
        - name: MINIO_SERVER
          value: "{{ minio_server }}"
        {% for env in environment %}
        - name: "{{ env.name }}"
          value: "{{ env.value }}"
        {% endfor %}
        command:
        - /bin/bash
        - -c
        # - sleep 1000d
        - >
          mkdir -p "${JOB_INPUT_DIR}" && mkdir -p "${JOB_OUTPUT_DIR}" && ./prejob.py && pwd && ls -al ${JOB_INPUT_DIR}
{%- if prejob_command %}
          && {{ prejob_command }}
        #   chown {{ securityContext['runAsUser'] }}:{{ securityContext['runAsGroup'] }} "${JOB_OUTPUT_DIR}"
{%- endif %}
      - name: job
        image: {{ image.repository }}
        imagePullPolicy: {{ image.pull_policy }}
        resources:
          limits:
            cpu: "{{ resources.limits.cpu }}"
            memory: "{{ resources.limits.memory }}"
          requests:
            cpu: "{{ resources.requests.cpu }}"
            memory: "{{ resources.requests.memory }}"
        {%- if command %}
        command:
        - 'bash'
        - '-c'
        - >
          ls -al ${JOB_INPUT_DIR} &&
          {{ command }} &&
          ls -al ${JOB_OUTPUT_DIR} &&
          touch "${JOB_OUTPUT_DIR}/finished"
        {%- endif %}
        env:
          {%- if clone_dir %}
          # The "JOB_SOURCE_DIR" provides the job script with the path to the location
          # of the cloned git repo (optional).
          - name: "JOB_SOURCE_DIR"
            value: "{{ clone_dir }}"
          - name: "SRC_GIT_URL"
            value: "{{ url }}"
          - name: "GIT_COMMIT_REF"
            value: "{{ commit_ref }}"
          {%- endif %}
          # The "JOB_OUTPUT_DIR" provides the job script with the path to the output
          # directory where the job results are expected to be stored.
          - name: "JOB_OUTPUT_DIR"
            value: "{{ job_output_dir }}"
          # The "JOB_INPUT_DIR" provides the job script with the path to the input
          # directory where the job input files are expected to be stored.
          - name: "JOB_INPUT_DIR"
            value: "{{ job_input_dir }}"
          # The "JOB_ID" provides the job script with the UUID associated with the job.
          - name: "JOB_ID"
            value: "{{ jobId }}"
          # The "JOB_TYPE" provides the string type for this job (e.g. chemscraper, somn, defaults, molli, clean, etc)
          - name: "JOB_TYPE"
            value: "{{ jobType }}"
          # Custom environment variables are defined here if provided in the job creation request
          {% for env in environment %}
          - name: "{{ env.name }}"
            value: "{{ env.value }}"
          {% endfor %}
        volumeMounts:
          - name: "shared-storage"
            mountPath: "/uws"
            subPath: "{{ workingVolume.subPath }}"
        {%- for volume in volumes %}
          - name: {{ volume.name }}
            mountPath: "{{ volume.mountPath | replace('JOB_ID',jobId) }}"
            subPath: "{{ volume.subPath | replace('JOB_ID',jobId) }}"
            readOnly: {{ volume.readOnly }}
        {%- endfor %}
        {%- for sec in secrets %}
          - name: "{{ sec }}"
            mountPath: "{{ sec.mountPath }}"
            readOnly: true
            subPath: "{{ sec.subPath }}"
        {%- endfor %}
      containers:
      - name: post-job
        image: "moleculemaker/mmli-backend:kubejob"
        imagePullPolicy: Always
        command:
        - 'bash'
        - '-c'
        - >
          ./postjob.py
        env:
          - name: "JOB_ID"
            value: "{{ jobId }}"
          - name: "JOB_TYPE"
            value: "{{ jobType }}"
          - name: "JOB_OUTPUT_DIR"
            value: "{{ job_output_dir }}"
          - name: MINIO_SERVER
            value: "{{ minio_server }}"
        volumeMounts:
          - name: "shared-storage"
            mountPath: "/uws"
            subPath: "{{ workingVolume.subPath }}"
          - name: server-config
            mountPath: /code/app/cfg/config.yaml
            subPath: config.yaml
          - name: server-secret
            mountPath: /code/app/cfg/secret.yaml
            subPath: secret.yaml